# -*- coding: utf-8 -*-
"""Datacleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9Ub3-SCrUYQ64iiFHTnH3e9GCcPeGEl

Step 1: Load the Dataset
"""

import pandas as pd

# Load your dataset
df = pd.read_csv('/content/sample_data/train.csv')

# Preview the first few rows
print(df.head())

"""Step 2: Handling Missing Values


"""

# Check for missing values
print(df.isnull().sum())

# Impute missing values:
# For 'Mileage', 'Engine', and 'Power', use the mode of each column
df['Mileage'] = df['Mileage'].fillna(df['Mileage'].mode()[0])
df['Engine'] = df['Engine'].fillna(df['Engine'].mode()[0])
df['Power'] = df['Power'].fillna(df['Power'].mode()[0])

# For 'Seats', use the median as it's numerical
df['Seats'] = df['Seats'].fillna(df['Seats'].median())

# Drop 'New_Price' column due to high percentage of missing values
df = df.drop(columns=['New_Price'])

# Confirm there are no missing values left
print(df.isnull().sum())

"""Step 3: Remove Units from Numerical Columns"""

# Define a function to remove non-numeric characters
def extract_numeric(value):
    if isinstance(value, str):
        # Keep only digits and decimal points
        return float(''.join(filter(lambda x: x.isdigit() or x == '.', value)))
    return value

# Apply this function to the relevant columns
df['Mileage'] = df['Mileage'].apply(extract_numeric)
df['Engine'] = df['Engine'].apply(extract_numeric)
df['Power'] = df['Power'].apply(extract_numeric)

# Note: Since 'New_Price' was dropped earlier due to high missing values, skip it here.
# If it's still in your data, you can uncomment the following line:
# df['New_Price'] = df['New_Price'].apply(extract_numeric)

# Verify the changes
print(df[['Mileage', 'Engine', 'Power']].head())

"""Step 4: One-Hot Encoding for Categorical Variables"""

# Perform one-hot encoding for 'Fuel_Type' and 'Transmission'
df = pd.get_dummies(df, columns=['Fuel_Type', 'Transmission'], drop_first=True, dtype=int)

# Verify the encoding and data types
print("\nFirst few rows:")
print(df.head())
print("\nData types of encoded columns:")
print(df.dtypes)

"""Step 5: Add New Feature (Current Age of Car)"""

from datetime import datetime

# Calculate current year
current_year = datetime.now().year

# Create a new column 'Car_Age'
df['Car_Age'] = current_year - df['Year']

# Verify the new feature
print(df[['Year', 'Car_Age']].head())

"""Step 6: Data Manipulation Operations"""

# Select specific columns (e.g., 'Name', 'Location', 'Year', and 'Price')
selected_df = df[['Name', 'Location', 'Year', 'Price']]
print(selected_df.head())

# Filter rows (e.g., cars priced over 10 lakhs)
filtered_df = df[df['Price'] > 10]
print(filtered_df.head())

# Rename columns (e.g., rename 'Kilometers_Driven' to 'Km_Driven')
df = df.rename(columns={'Kilometers_Driven': 'Km_Driven'})
print(df.columns)

# Mutate
from datetime import datetime
# Calculate the current year
current_year = datetime.now().year
# Add a new column 'Car_Age' representing the age of the car
df['Car_Age'] = current_year - df['Year']
print(df[['Year', 'Car_Age']].head())

# Arrange (sort) by price in descending order
sorted_df = df.sort_values(by='Price', ascending=False)
print(sorted_df.head())

# Summarize with Group By
# Group by 'Location' and calculate the mean price for each location
location_summary = df.groupby('Location')['Price'].mean().reset_index()
# Rename the summarized column for clarity
location_summary = location_summary.rename(columns={'Price': 'Average_Price'})
print(location_summary.head())